import pandas as pd
import numpy as np
import os

# --- –ë–ª–æ–∫ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∞ ---
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from src.config import *
# --- –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ ---

def calculate_rsi(series: pd.Series, length: int = 14) -> pd.Series:
    """–†–∞—Å—á–µ—Ç RSI –≤—Ä—É—á–Ω—É—é."""
    delta = series.diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=length).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=length).mean()
    
    rs = gain / loss
    rsi = 100 - (100 / (1 + rs))
    return rsi

def calculate_macd(series: pd.Series, fast: int = 12, slow: int = 26, signal: int = 9) -> pd.Series:
    """–†–∞—Å—á–µ—Ç MACD Histogram –≤—Ä—É—á–Ω—É—é."""
    exp1 = series.ewm(span=fast, adjust=False).mean()
    exp2 = series.ewm(span=slow, adjust=False).mean()
    macd = exp1 - exp2
    signal_line = macd.ewm(span=signal, adjust=False).mean()
    histogram = macd - signal_line
    return histogram

def run_preparation():
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –ø–∞–π–ø–ª–∞–π–Ω –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö:
    1. –ó–∞–≥—Ä—É–∑–∫–∞
    2. –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç–∏ (% –∏–∑–º–µ–Ω–µ–Ω–∏–µ)
    3. –†–∞—Å—á–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (RSI, MACD, –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å, –∫–∞–ª–µ–Ω–¥–∞—Ä—å)
    4. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞—Ä–≥–µ—Ç–æ–≤
    5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    """
    print("üöÄ –ó–∞–ø—É—Å–∫ –ü–û–õ–ù–û–ì–û –ø–∞–π–ø–ª–∞–π–Ω–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ pandas_ta)...")
    
    # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    print("1/5: –ó–∞–≥—Ä—É–∑–∫–∞ —Å—ã—Ä—ã—Ö —Å–≤–µ—á–µ–π...")
    try:
        df = pd.read_csv(RAW_TRAIN_CANDLES_PATH, parse_dates=['begin'])
    except FileNotFoundError:
        print(f"–û–®–ò–ë–ö–ê: –§–∞–π–ª {RAW_TRAIN_CANDLES_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
        
    df = df.sort_values(by=['ticker', 'begin']).reset_index(drop=True)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç–∞—Ä–≥–µ—Ç–æ–≤
    original_prices = df[['ticker', 'begin', 'close']].copy()

    # 2. –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç–∏
    print("2/5: –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ä—è–¥–æ–≤ –∫ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç–∏ (—Ä–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π)...")
    ohlcv_cols = ['open', 'high', 'low', 'close', 'volume']
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º pct_change() –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    # groupby('ticker') –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —Ä–∞—Å—á–µ—Ç—ã –Ω–µ "–ø–µ—Ä–µ—Ç–µ–∫–∞—é—Ç" –º–µ–∂–¥—É –∞–∫—Ü–∏—è–º–∏
    df[ohlcv_cols] = df.groupby('ticker')[ohlcv_cols].pct_change()
    
    # –ó–∞–º–µ–Ω—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ inf –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ NaN, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
    df.replace([np.inf, -np.inf], np.nan, inplace=True)
    
    # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–∫–µ—Ä–∞, –≥–¥–µ pct_change() –¥–∞–µ—Ç NaN
    df = df.dropna(subset=ohlcv_cols).reset_index(drop=True)

    # 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –Ω–∞ –°–¢–ê–¶–ò–û–ù–ê–†–ù–´–• –¥–∞–Ω–Ω—ã—Ö
    print("3/5: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è TA-–ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –Ω–∞ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —Å–±–æ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
    features_list = []
    for ticker, group in df.groupby('ticker'):
        group = group.copy()
        
        # –†–∞—Å—á–µ—Ç RSI –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–Ω–µ–≤–Ω—ã—Ö –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π ('close')
        group['rsi'] = calculate_rsi(group['close'], length=14)
        
        # –†–∞—Å—á–µ—Ç MACD Histogram –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–Ω–µ–≤–Ω—ã—Ö –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π ('close')
        group['macd_hist'] = calculate_macd(group['close'])
        
        # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π –∑–∞ 20 –¥–Ω–µ–π)
        group['volatility_20d'] = group['close'].rolling(20).std()
        
        features_list.append(group)
    
    df = pd.concat(features_list)
    
    # –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    df['day_of_week'] = df['begin'].dt.dayofweek
    df['month'] = df['begin'].dt.month
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º NaN, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤ –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ä—è–¥–∞ –ø–æ—Å–ª–µ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    df.fillna(method='bfill', inplace=True) # bfill, —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–∞—á–∞–ª–æ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –±—É–¥—É—â–µ–≥–æ
    df.fillna(0, inplace=True) # –ï—Å–ª–∏ –≤–µ—Å—å —Ç–∏–∫–µ—Ä - NaN, –∑–∞–ø–æ–ª–Ω—è–µ–º –Ω—É–ª—è–º–∏
    
    print("  ‚úì TA –∏ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å–æ–∑–¥–∞–Ω—ã.")

    # 4. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞—Ä–≥–µ—Ç–æ–≤
    print("4/5: –°–æ–∑–¥–∞–Ω–∏–µ –±—É–¥—É—â–∏—Ö —Ç–∞—Ä–≥–µ—Ç–æ–≤...")
    # –ú–µ—Ä–¥–∂–∏–º –æ–±—Ä–∞—Ç–Ω–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç–∞—Ä–≥–µ—Ç–æ–≤
    df = pd.merge(df, original_prices, on=['ticker', 'begin'], how='left', suffixes=('', '_orig'))
    
    grouped_orig = df.groupby('ticker')
    for i in range(1, PREDICTION_LENGTH + 1):
        df[f'target_return_{i}d'] = grouped_orig['close_orig'].shift(-i) / df['close_orig'] - 1
        df[f'target_grew_{i}d'] = (df[f'target_return_{i}d'] > 0).astype(float)
        
    df = df.drop(columns=['close_orig'])
    df.dropna(subset=[f'target_return_{PREDICTION_LENGTH}d'], inplace=True)
    df = df.reset_index(drop=True)
    
    print("  ‚úì –¢–∞—Ä–≥–µ—Ç—ã —Å–æ–∑–¥–∞–Ω—ã.")

    # 5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    print("5/5: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞...")
    os.makedirs(os.path.dirname(FINAL_TRAIN_DF_PATH), exist_ok=True)
    df.to_parquet(FINAL_TRAIN_DF_PATH, index=False)
    
    print(f"\n‚úÖ –ì–æ—Ç–æ–≤–æ! –§–∏–Ω–∞–ª—å–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {FINAL_TRAIN_DF_PATH}")
    print(f"   –§–æ—Ä–º–∞: {df.shape}")
    print("\n   –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ NaN:")
    print(df.isnull().sum().sum()) # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å 0

if __name__ == '__main__':
    run_preparation()